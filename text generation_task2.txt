from transformers import GPT2LMHeadModel, GPT2Tokenizer
import torch

class TextGenerator:
    def __init__(self, model_name='gpt2-medium'):
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        print(f"Using device: {self.device}")

        print(f"Loading {model_name} model and tokenizer...")
        self.model = GPT2LMHeadModel.from_pretrained(model_name).to(self.device)
        self.tokenizer = GPT2Tokenizer.from_pretrained(model_name)

        # Set the padding token to the EOS token
        self.tokenizer.pad_token = self.tokenizer.eos_token
        self.model.config.pad_token_id = self.model.config.eos_token_id

        print("Model and tokenizer loaded successfully.")

    def generate_text(self, prompt, max_length=200, num_return_sequences=1):
        # Encode the input prompt
        input_ids = self.tokenizer.encode(prompt, return_tensors='pt').to(self.device)

        # Generate text
        output = self.model.generate(
            input_ids,
            max_length=max_length,
            num_return_sequences=num_return_sequences,
            no_repeat_ngram_size=2,
            do_sample=True,
            top_k=50,
            top_p=0.95,
            temperature=0.7,
            pad_token_id=self.tokenizer.eos_token_id
        )

        # Decode the generated sequences
        generated_texts = [self.tokenizer.decode(seq, skip_special_tokens=True) for seq in output]
        return generated_texts

def main():
    # Initialize the text generator
    generator = TextGenerator()

    # Get user input for the prompt
    prompt = input("Enter a prompt for text generation: ")

    # Generate text
    generated_texts = generator.generate_text(prompt, max_length=200, num_return_sequences=3)

    # Print the results
    print("\nGenerated texts:")
    for i, text in enumerate(generated_texts, 1):
        print(f"\nText {i}:")
        print(text)

if __name__ == "__main__":
    main()